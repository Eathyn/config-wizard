{"version":3,"sources":["../src/utils/error.ts","../src/cli/prompts.ts","../src/utils/package.ts","../src/utils/file.ts","../src/generators/editorconfig.generator.ts","../src/generators/eslint.generator.ts","../src/generators/prettier.generator.ts","../src/generators/stylelint.generator.ts","../src/generators/commitlint.generator.ts","../src/utils/husky.ts","../src/cli/validate.ts","../src/index.ts"],"names":["join","writeFileSync","execSync","confirm"],"mappings":"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","file":"index.js","sourcesContent":["export default function handleError(message: string, error: unknown) {\n  if (error instanceof Error) {\n    if (message) {\n      console.error(`\\n${message}: `)\n    }\n    console.error(error)\n  } else {\n    const err = new Error(`${JSON.stringify(error)}`)\n    if (message) {\n      console.error(`\\n${message}: `)\n    }\n    console.error(err)\n  }\n  process.exit(1)\n}\n","import { confirm, select } from '@inquirer/prompts'\nimport handleError from '../utils/error.ts'\n\nexport async function promptUser() {\n  try {\n    const needCodeLint: boolean = await confirm({\n      message: '是否需要代码规范？',\n      default: true,\n    })\n    const needCommitLint: boolean = await confirm({\n      message: '是否需要提交规范？',\n      default: true,\n    })\n    if (!needCodeLint && !needCommitLint) {\n      console.log('所有选项都选择了否，结束执行。')\n      process.exit(0)\n    }\n    const moduleType: ModuleType = await select({\n      message: '使用哪种模块规范？',\n      choices: [\n        {\n          name: 'ESM',\n          value: 'esm',\n        },\n        {\n          name: 'CommonJS',\n          value: 'cjs',\n        },\n      ],\n    })\n    const useTypeScript: boolean = await confirm({\n      message: '是否使用 TypeScript？',\n      default: true,\n    })\n    const framework: Framework = await select({\n      message: '使用哪个框架？',\n      choices: [\n        {\n          name: 'Vue',\n          value: 'vue',\n        },\n        {\n          name: 'React',\n          value: 'react',\n        },\n      ],\n    })\n    const packageManager: PackageManager = await select({\n      message: '使用哪个包管理器？',\n      choices: [\n        {\n          name: 'pnpm',\n          value: 'pnpm',\n        },\n        {\n          name: 'npm',\n          value: 'npm',\n        },\n        {\n          name: 'yarn',\n          value: 'yarn',\n        },\n      ]\n    })\n    const answers: Answers = {\n      needCodeLint,\n      needCommitLint,\n      moduleType,\n      useTypeScript,\n      framework,\n      packageManager,\n    }\n    return answers\n  } catch (err) {\n    handleError('处理用户输入时发生错误', err)\n  }\n}\n","import { execSync } from 'child_process'\nimport { join } from 'path'\nimport { readFileSync, writeFileSync } from 'fs'\nimport handleError from './error.ts'\n\ntype Dependencies = string[]\ntype PackageJson = Record<string, any>\n\nexport function getDependencies(answers: Answers) {\n  const devDependencies: Dependencies = []\n  const devDependenciesExactVersion: Dependencies = []\n  addCodeLintDependencies(answers, devDependencies, devDependenciesExactVersion)\n  addCommitLintDependencies(answers, devDependencies)\n  logDependencies(devDependencies, devDependenciesExactVersion)\n  return {\n    devDependencies,\n    devDependenciesExactVersion,\n  }\n}\n\nfunction addCodeLintDependencies(answers: Answers, devDependencies: Dependencies, devDependenciesExactVersion: Dependencies) {\n  const { needCodeLint, framework, useTypeScript } = answers\n  if (!needCodeLint) return\n  devDependencies.push(\n    'eslint',\n    '@eslint/js',\n    'globals',\n    'eslint-config-prettier',\n    'husky',\n    'lint-staged',\n    'stylelint',\n    'stylelint-config-hudochenkov',\n    'stylelint-config-standard-vue',\n    'stylelint-order',\n  )\n  devDependenciesExactVersion.push('prettier')\n  switch (framework) {\n    case 'vue':\n      devDependencies.push('eslint-plugin-vue')\n      break;\n    case 'react':\n      devDependencies.push('eslint-plugin-react', 'eslint-plugin-react-hooks')\n      break;\n  }\n  if (useTypeScript) {\n    devDependencies.push('typescript-eslint')\n    devDependencies.push('jiti')\n  }\n}\n\nfunction addCommitLintDependencies(answers: Answers, devDependencies: Dependencies) {\n  const { needCommitLint, needCodeLint } = answers\n  if (needCommitLint) {\n    devDependencies.push(\n      '@commitlint/cli',\n      '@commitlint/config-conventional',\n      '@commitlint/cz-commitlint',\n      'commitizen',\n      '@commitlint/types',\n    )\n    // 使用了代码规范也会安装 husky\n    if (!needCodeLint) {\n      devDependencies.push('husky')\n    }\n  }\n}\n\nfunction logDependencies(devDependencies: Dependencies, devDependenciesExactVersion: Dependencies) {\n  console.log('\\n将安装以下开发依赖（devDependencies）')\n  for (let dep of [...devDependencies, ...devDependenciesExactVersion]) {\n    console.log(`${dep}`)\n  }\n  console.log('\\n')\n}\n\nexport async function installDependencies(packageManager: PackageManager, devDependencies: Dependencies, devDependenciesExactVersion: Dependencies) {\n  try {\n    const installDevDependenciesCmd = {\n      npm: `npm install --save-dev ${devDependencies.join(' ')}`,\n      pnpm: `pnpm add --save-dev ${devDependencies.join(' ')}`,\n      yarn: `yarn add --dev ${devDependencies.join(' ')}`,\n    }[packageManager]\n    console.log('\\n开始安装开发依赖...')\n    execSync(installDevDependenciesCmd, { stdio: 'inherit' })\n    const installExactDevDependenciesCmd = {\n      npm: `npm install --save-dev --save-exact ${devDependenciesExactVersion.join(' ')}`,\n      pnpm: `pnpm add --save-dev --save-exact ${devDependenciesExactVersion.join(' ')}`,\n      yarn: `yarn add --dev --exact ${devDependenciesExactVersion.join(' ')}`,\n    }[packageManager]\n    execSync(installExactDevDependenciesCmd, { stdio: 'inherit' })\n    console.log('开发依赖安装成功！')\n  } catch (err) {\n    handleError('开发依赖安装失败', err)\n  }\n}\n\nexport function updatePackageJson(answers: Answers) {\n  const packageJsonPath = join(process.cwd(), 'package.json')\n  const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf8'))\n  updateScript(answers, packageJson)\n  updateConfig(answers, packageJson)\n  updateLintStaged(answers, packageJson)\n  writePackageJson(packageJsonPath, packageJson)\n}\n\nfunction updateScript(answers: Answers, packageJson: PackageJson) {\n  const { needCodeLint, needCommitLint } = answers\n  if (needCodeLint) {\n    packageJson.scripts = {\n      ...packageJson.scripts,\n      lint: \"lint-staged\",\n    }\n  }\n  if (needCommitLint) {\n    packageJson.scripts = {\n      ...packageJson.scripts,\n      cz: 'git-cz'\n    }\n  }\n  packageJson.scripts = {\n    ...packageJson.scripts,\n    prepare: 'husky',\n  }\n}\n\nfunction updateConfig(answers: Answers, packageJson: PackageJson) {\n  const { needCommitLint } = answers\n  if (needCommitLint) {\n    packageJson.config = {\n      ...packageJson.config,\n      commitizen: {\n        path: \"@commitlint/cz-commitlint\"\n      },\n    }\n  }\n}\n\nfunction updateLintStaged(answers: Answers, packageJson: PackageJson) {\n  const { needCodeLint } = answers\n  if (needCodeLint) {\n    packageJson['lint-staged'] = {\n      '*.{vue,ts,js}': [\n        'eslint --fix',\n        'prettier --write'\n      ],\n      '*.css': [\n        \"stylelint --fix\",\n        \"prettier --write\"\n      ],\n      '*.json': 'prettier --write'\n    }\n  }\n}\n\nfunction writePackageJson(packageJsonPath: string, packageJson: PackageJson) {\n  try {\n    writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\\n')\n    console.log('package.json 更新成功')\n  } catch (err) {\n    handleError('更新 package.json 失败', err)\n  }\n}\n","import path from 'path'\nimport fs from 'fs'\n\nexport function stringifyTemplate(dir: string, fileName: string) {\n  const templatePath = path.join(path.dirname(new URL(import.meta.url).pathname), '..', 'templates', dir, fileName)\n  console.log('templatePath: ', templatePath)\n  return fs.readFileSync(templatePath, { encoding: 'utf-8' })\n}\n\nexport function generateConfigFileName(moduleType: ModuleType, useTypeScript: boolean, toolName: ToolName ) {\n  if (moduleType === 'esm') {\n    if (useTypeScript) {\n      switch (toolName) {\n        case 'eslint':\n          return 'eslint.config.ts'\n        case 'prettier':\n          // Prettier 目前需要使用实验性的 node 标志才能将配置文件改为 ts 格式，等这个标志稳定后再改\n          // https://prettier.io/docs/configuration#typescript-configuration-files\n          return 'prettier.config.js'\n        case 'stylelint':\n          // stylelint 还不支持 ts 文件：https://stylelint.io/user-guide/configure\n          return 'stylelint.config.js'\n        case 'commitlint':\n          return 'commitlint.config.ts'\n        default:\n          throw new Error('Unsupported tool name')\n      }\n    } else {\n      switch (toolName) {\n        case 'eslint':\n          return 'eslint.config.js'\n        case 'prettier':\n          return 'prettier.config.js'\n        case 'stylelint':\n          return 'stylelint.config.js'\n        case 'commitlint':\n          return 'commitlint.config.js'\n        default:\n          throw new Error('Unsupported tool name')\n      }\n    }\n  } else {\n    if (useTypeScript) {\n      switch (toolName) {\n        case 'eslint':\n          return 'eslint.config.mts'\n        case 'prettier':\n          return 'prettier.config.mts'\n        case 'stylelint':\n          // stylelint 还不支持 ts 文件：https://stylelint.io/user-guide/configure\n          return 'stylelint.config.mjs'\n        case 'commitlint':\n          return 'commitlint.config.mts'\n        default:\n          throw new Error('Unsupported tool name')\n      }\n    } else {\n      switch (toolName) {\n        case 'eslint':\n          return 'eslint.config.mjs'\n        case 'prettier':\n          return 'prettier.config.mjs'\n        case 'stylelint':\n          return 'stylelint.config.mjs'\n        case 'commitlint':\n          return 'commitlint.config.mjs'\n        default:\n          throw new Error('Unsupported tool name')\n      }\n    }\n  }\n}\n","import { join } from 'path'\nimport { writeFileSync } from 'fs'\nimport { stringifyTemplate } from '../utils/file.ts'\nimport handleError from '../utils/error.ts'\n\nexport default function generateEditorConfig() {\n  try {\n    const { fileName, fileContent } = getEditorConfig()\n    const configPath = join(process.cwd(), fileName)\n    console.log('configPath', configPath)\n    writeFileSync(configPath, fileContent)\n    console.log(`已生成 .editorconfig 配置文件：${fileName}`)\n  } catch (err) {\n    handleError('.editorconfig 配置文件生成失败', err)\n  }\n}\n\nfunction getEditorConfig() {\n  return {\n    fileName: '.editorconfig',\n    fileContent: stringifyTemplate('editor', '.editorconfig')\n  }\n}\n\n","import { join } from 'path'\nimport { writeFileSync } from 'fs'\nimport { stringifyTemplate, generateConfigFileName } from '../utils/file.ts'\nimport handleError from '../utils/error.ts'\n\nexport default function generateEslintConfig(answers: Answers) {\n  try {\n    const { fileName, fileContent } = getEslintConfig(answers)\n    const configPath = join(process.cwd(), fileName)\n    writeFileSync(configPath, fileContent)\n    console.log(`已生成 ESLint 配置文件：${fileName}`)\n  } catch (err) {\n    handleError('ESLint 配置文件生成失败', err)\n  }\n}\n\nfunction getEslintConfig(answers: Answers) {\n  const { moduleType, framework, useTypeScript } = answers\n  const eslintFileName = generateConfigFileName(moduleType, useTypeScript, 'eslint')\n  if (framework === 'vue') {\n    if (useTypeScript) {\n      return {\n        fileName: eslintFileName,\n        fileContent: stringifyTemplate('eslint', 'vue-ts.config.js'),\n      }\n    } else {\n      return {\n        fileName: eslintFileName,\n        fileContent: stringifyTemplate('eslint', 'vue-js.config.js'),\n      }\n    }\n  } else {\n    // TODO 先不做 React 的配置\n    if (useTypeScript) {\n      return {\n        fileName: eslintFileName,\n        fileContent: stringifyTemplate('eslint', 'react-ts.config.js'),\n      }\n    } else {\n      return {\n        fileName: eslintFileName,\n        fileContent: stringifyTemplate('eslint', 'react-js.config.js'),\n      }\n    }\n  }\n}\n","import { join } from 'path'\nimport { writeFileSync } from 'fs'\nimport { stringifyTemplate, generateConfigFileName } from '../utils/file.ts'\nimport handleError from '../utils/error.ts'\n\nexport default function generatePrettierConfig(answers: Answers) {\n  try {\n    const { fileName, fileContent } = getPrettierConfig(answers)\n    const configPath = join(process.cwd(), fileName)\n    writeFileSync(configPath, fileContent)\n    console.log(`已生成 Prettier 配置文件：${fileName}`)\n  } catch (err) {\n    handleError('Prettier 配置文件生成失败', err)\n  }\n}\n\nfunction getPrettierConfig(answers: Answers) {\n  const { moduleType, framework, useTypeScript } = answers\n  const prettierFileName = generateConfigFileName(moduleType, useTypeScript, 'prettier')\n  if (framework === 'vue') {\n    // Prettier 目前需要使用实验性的 node 标志才能将配置文件改为 ts 格式，等这个标志稳定后再改\n    // https://prettier.io/docs/configuration#typescript-configuration-files\n    return {\n      fileName: prettierFileName,\n      fileContent: stringifyTemplate('prettier', 'js.config.js'),\n    }\n  } else {\n    // TODO 先不做 React 的配置\n    return {\n      fileName: prettierFileName,\n      fileContent: stringifyTemplate('prettier', 'js.config.js'),\n    }\n  }\n}\n","import { join } from 'path'\nimport { writeFileSync } from 'fs'\nimport { stringifyTemplate, generateConfigFileName } from '../utils/file.ts'\nimport handleError from '../utils/error.ts'\n\nexport default function generateStylelintConfig(answers: Answers) {\n  try {\n    const { fileName, fileContent } = getStylelintConfig(answers)\n    const configPath = join(process.cwd(), fileName)\n    writeFileSync(configPath, fileContent)\n    console.log(`已生成 Stylelint 配置文件：${fileName}`)\n  } catch (err) {\n    handleError('Stylelint 配置文件生成失败', err)\n  }\n}\n\nexport function getStylelintConfig(answers: Answers) {\n  const { moduleType, framework, useTypeScript } = answers\n  const stylelintFileName = generateConfigFileName(moduleType, useTypeScript, 'stylelint')\n  if (framework === 'vue') {\n    return {\n      fileName: stylelintFileName,\n      // stylelint 还不支持 ts 文件：https://stylelint.io/user-guide/configure\n      fileContent: stringifyTemplate('stylelint', 'vue-js.config.js'),\n    }\n  } else {\n    // TODO 先不做 React 的配置\n    return {\n      fileName: stylelintFileName,\n      fileContent: stringifyTemplate('stylelint', 'react-js.config.js'),\n    }\n  }\n}\n","import { join } from 'path'\nimport { writeFileSync } from 'fs'\nimport { stringifyTemplate, generateConfigFileName } from '../utils/file.ts'\nimport handleError from '../utils/error.ts'\n\nexport default function generateCommitlintConfig(answers: Answers) {\n  try {\n    const { fileName, fileContent } = getCommitlintConfig(answers)\n    const configPath = join(process.cwd(), fileName)\n    writeFileSync(configPath, fileContent)\n    console.log(`已生成 commitlint 配置文件：${fileName}`)\n  } catch (err) {\n    handleError('commitlint 配置文件生成失败', err)\n  }\n}\n\nfunction getCommitlintConfig(answers: Answers) {\n  const { moduleType, framework, useTypeScript } = answers\n  const commitlintFileName = generateConfigFileName(moduleType, useTypeScript, 'commitlint')\n  if (framework === 'vue') {\n    if (useTypeScript) {\n      return {\n        fileName: commitlintFileName,\n        fileContent: stringifyTemplate('commitlint', 'ts.config.ts'),\n      }\n    } else {\n      return {\n        fileName: commitlintFileName,\n        fileContent: stringifyTemplate('commitlint', 'js.config.js'),\n      }\n    }\n  } else {\n    // TODO 先不做 React 的配置\n    if (useTypeScript) {\n      return {\n        fileName: commitlintFileName,\n        fileContent: stringifyTemplate('commitlint', 'ts.config.ts'),\n      }\n    } else {\n      return {\n        fileName: commitlintFileName,\n        fileContent: stringifyTemplate('commitlint', 'js.config.js'),\n      }\n    }\n  }\n}\n","import { execSync } from 'child_process'\nimport { join } from 'path'\nimport { writeFileSync } from 'fs'\nimport handleError from './error.ts'\n\nexport function generateGitHooks(answers: Answers) {\n  const { packageManager, needCodeLint, needCommitLint } = answers\n  initHusky(packageManager)\n  createPreCommitHook(needCodeLint)\n  createCommitMessageHook(needCommitLint)\n}\n\nfunction initHusky(packageManager: PackageManager) {\n  try {\n    const huskyPrepareCmd = {\n      npm: 'npm run prepare',\n      pnpm: 'pnpm run prepare',\n      yarn: 'yarn run postinstall',\n    }[packageManager]\n    execSync(huskyPrepareCmd, { stdio: 'inherit' })\n    console.log('成功初始化 Husky')\n  } catch (err) {\n    handleError('初始化 Husky 失败', err)\n  }\n}\n\nfunction createPreCommitHook(needCodeLint: boolean) {\n  if (needCodeLint) {\n    const preCommitPath = join(process.cwd(), '.husky', 'pre-commit')\n    const preCommitContent = `#!/usr/bin/env bash\\npnpm run lint\\n`\n    try {\n      writeFileSync(preCommitPath, preCommitContent)\n      console.log('成功创建 pre-commit 钩子')\n    } catch (err) {\n      handleError('创建 pre-commit 钩子失败', err)\n    }\n  }\n}\n\nfunction createCommitMessageHook(needCommitLint: boolean) {\n  if (needCommitLint) {\n    const commitMsgPath = join(process.cwd(), '.husky', 'commit-msg')\n    const commitMsgContent = `#!/usr/bin/env bash\\npnpm commitlint --edit \"$1\"\\n`\n    try {\n      writeFileSync(commitMsgPath, commitMsgContent)\n      console.log('成功创建 commit-msg 钩子')\n    } catch (err) {\n      handleError('创建 commit-msg 钩子失败', err)\n    }\n  }\n}\n","export default function validateAnswers(answers: Answers) {\n  const {\n    needCodeLint,\n    needCommitLint,\n    moduleType,\n    useTypeScript,\n    framework,\n    packageManager,\n  } = answers\n  const validModuleType: ModuleType[] = ['esm', 'cjs']\n  const validFramework: Framework[] = ['vue', 'react']\n  const validPackageManager: PackageManager[] = ['pnpm', 'npm', 'yarn']\n  const errors: string[] = []\n  if (typeof needCodeLint !== 'boolean') {\n    errors.push('\"是否需要代码规范\" 的结果必须为布尔值')\n  }\n  if (typeof needCommitLint !== 'boolean') {\n    errors.push('\"是否需要提交规范\" 的结果必须为布尔值')\n  }\n  if (!validModuleType.includes(moduleType)) {\n    errors.push('\"使用哪种模块规范\" 的结果必须为 \"esm\" 或 \"cjs\"')\n  }\n  if (typeof useTypeScript !== 'boolean') {\n    errors.push('\"是否使用 TypeScript\" 的结果必须为布尔值')\n  }\n  if (!validFramework.includes(framework)) {\n    errors.push('\"使用哪个框架\" 的结果必须为 \"vue\" 或 \"react\"')\n  }\n  if (!validPackageManager.includes(packageManager)) {\n    errors.push('\"使用哪个包管理器\" 的结果必须为 \"pnpm\" 或 \"npm\" 或 \"yarn\"')\n  }\n  return {\n    isValid: errors.length === 0,\n    errors,\n  }\n}","import { Command } from 'commander'\nimport { confirm } from '@inquirer/prompts'\nimport { promptUser } from './cli/prompts'\nimport { getDependencies, installDependencies, updatePackageJson } from './utils/package'\nimport generateEditorConfig from './generators/editorconfig.generator'\nimport generateEslintConfig from './generators/eslint.generator'\nimport generatePrettierConfig from './generators/prettier.generator'\nimport generateStylelintConfig from './generators/stylelint.generator'\nimport generateCommitlintConfig from './generators/commitlint.generator'\nimport { generateGitHooks } from './utils/husky'\nimport validateAnswers from './cli/validate'\n\nconst program = new Command()\n\nprogram\n  .name('config wizard')\n  .version('1.0.0')\n  .description('config wizard')\n  .action(async () => {\n    const answers = await promptUser()\n    if (typeof answers === 'undefined') {\n      return\n    }\n    const { isValid, errors } = validateAnswers(answers)\n    if (!isValid) {\n      console.error('你的输入存在错误：')\n      console.error(errors.join('\\n'))\n      process.exit(1)\n    }\n    if (!answers.needCodeLint && !answers.needCommitLint) {\n      console.log('你选择了无需代码规范和提交规范，因此程序结束')\n      process.exit(0)\n    }\n    const { devDependencies, devDependenciesExactVersion } = getDependencies(answers)\n    const isInstallDependencies = await confirm({\n      message: '是否立刻安装这些依赖',\n      default: true,\n    })\n    if (isInstallDependencies) {\n      await installDependencies(answers.packageManager, devDependencies, devDependenciesExactVersion)\n    }\n    if (answers.needCodeLint) {\n      // 生成编辑器配置文件\n      generateEditorConfig()\n      // 生成 ESLint 配置文件\n      generateEslintConfig(answers)\n      // 生成 Prettier 配置文件\n      generatePrettierConfig(answers)\n      // 生成 Stylelint 配置文件\n      generateStylelintConfig(answers)\n    }\n    if (answers.needCommitLint) {\n      // 生成配置文件\n      generateCommitlintConfig(answers)\n    }\n    // 更新 package.json\n    updatePackageJson(answers)\n    // 生成 Git 钩子\n    generateGitHooks(answers)\n  })\n\nprogram.parse(process.argv)\n"]}